package main

import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"
	"time"

	"github.com/araddon/dateparse"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/pgvector/pgvector-go"
	"github.com/rs/zerolog/log"
)

func insertRecord(byteValue []byte, dbpool *pgxpool.Pool) error {

	//setup log with component name
	log := log.With().Str("component", "insertRecord").Logger()

	// Unmarshal JSON input into a map
	var result map[string]interface{}
	if err := json.Unmarshal(byteValue, &result); err != nil {
		log.Error().Err(err).Msg("failed to unmarshal JSON")
		return fmt.Errorf("failed to unmarshal JSON: %w", err)
	}

	// Extract relevant fields
	metadata, ok := result["cveMetadata"].(map[string]interface{})
	if !ok {
		log.Error().Msg("missing or invalid cveMetadata")
		return fmt.Errorf("missing or invalid cveMetadata")
	}

	containers, ok := result["containers"].(map[string]interface{})
	if !ok {
		log.Error().Msgf("missing or invalid containers. Result: %s", result)
		return fmt.Errorf("missing or invalid containers")
	}

	cna, ok := containers["cna"].(map[string]interface{})
	if !ok {
		log.Error().Msgf("missing or invalid cna. containers: %s", containers)
		return fmt.Errorf("missing or invalid cna")
	}

	cveID, ok := metadata["cveId"].(string)
	if !ok {
		log.Error().Msg("missing or invalid cveId")
		return fmt.Errorf("missing or invalid cveId")
	}

	log = log.With().Str("cve_id", cveID).Logger()

	datePublished, ok := metadata["datePublished"].(string)
	if !ok {
		log.Error().Msg("missing or invalid datePublished")
		datePublished = time.Now().UTC().Format(time.RFC3339)
	}

	dateUpdated, ok := metadata["dateUpdated"].(string)
	if !ok {
		log.Error().Msgf("missing or invalid dateUpdated for cve_id")
		dateUpdated = time.Now().UTC().Format(time.RFC3339)
	}

	// Query the latest record from the database
	selectQuery := `SELECT updated_at, vrsn FROM cve.cve_records WHERE cve_id=$1 ORDER BY updated_at DESC LIMIT 1;`
	var oldUpdatedDate time.Time
	var oldVrsn string

	row := dbpool.QueryRow(context.Background(), selectQuery, cveID)
	err := row.Scan(&oldUpdatedDate, &oldVrsn)
	if err != nil && err != pgx.ErrNoRows {
		log.Error().Err(err).Msg("failed to query cve_records")
		return err
	}

	// Determine the version and check if the record should be updated
	vrsn := 1
	if err == nil {
		i, err := strconv.Atoi(oldVrsn)
		if err != nil {
			log.Error().Err(err).Msg("failed to convert vrsn to int")
			return err
		}
		vrsn = i + 1

		newUpdatedDate, err := dateparse.ParseAny(dateUpdated)
		if err != nil {
			log.Error().Err(err).Msg("failed to parse dateUpdated")
			return err
		}

		if !newUpdatedDate.After(oldUpdatedDate) {
			log.Info().Msgf("Not inserting as DB already has a newer or same update for record with cve_id: %s", cveID)
			return nil
		}
	}

	if cna["descriptions"] == nil {
		log.Info().Msgf("Not inserting as record with cve_id: %s has no cna", cveID)
		return nil
	}

	// Extract the descriptions list
	descriptionInterface, ok := cna["descriptions"].([]interface{})[0].(map[string]interface{})
	if !ok {
		log.Error().Msgf("missing or invalid descriptions cna['descriptions']: %s", cna["descriptions"].(map[string]interface{}))
		return fmt.Errorf("missing or invalid descriptions")
	}

	descriptionValue, ok := descriptionInterface["value"].(string)
	if !ok {
		log.Error().Msgf("missing or invalid value in descriptions: %s", descriptionInterface)
		return fmt.Errorf("missing or invalid value in descriptions")
	}

	embedding, err := getEmbedding(cveID + ": " + descriptionValue)
	if err != nil {
		log.Error().Err(err).Msg("failed to get embedding")
		return err
	}

	// Insert the new record
	insertQuery := `INSERT INTO cve.cve_records (cve_id, record, vrsn, created_at, updated_at, description, embedding) VALUES ($1, $2, $3, $4, $5, $6, $7);`
	_, err = dbpool.Exec(context.Background(), insertQuery, cveID, string(byteValue), strconv.Itoa(vrsn), datePublished, dateUpdated, descriptionValue, pgvector.NewVector(embedding))
	if err != nil {
		log.Error().Err(err).Msg("failed to insert row")
		return err
	}

	return nil
}

func getExistingIds(dbpool *pgxpool.Pool, mapchan chan string) error {
	select_query := `SELECT cve_id FROM cve.cve_records`

	rows, err := dbpool.Query(context.Background(), select_query)
	if err != nil {
		log.Error().Err(err).Msg("Unable to query cve.cve_records")
		return err
	}
	defer rows.Close()

	for rows.Next() {
		var id = ""
		err := rows.Scan(&id)
		if err != nil {
			log.Error().Err(err).Msg("Unable to scan row")
			return err
		}
		mapchan <- id
	}

	return nil

}
