package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"os/signal"
	"strconv"
	"strings"
	"syscall"

	"github.com/confluentinc/confluent-kafka-go/kafka"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

func main() {

	//default values for local testing
	// host := getEnv("HOST", "localhost")
	// portStr := getEnv("PORT", "5432")
	// user := getEnv("USER", "anuraag")
	// // user := "anuraag"
	// password := getEnv("PWD", "anuraag")
	// // password := "anuraag"
	// dbname := getEnv("DB", "postgres")
	// brokerstring := getEnv("BROKERS", "localhost:9092")
	// topic := getEnv("TOPIC", "cve")
	// groupId := getEnv("GROUP", "group1")

	host := getEnvWithoutDefaults("HOST")
	portStr := getEnvWithoutDefaults("PORT")
	user := getEnvWithoutDefaults("USER")
	password := getEnvWithoutDefaults("PWD")
	dbname := getEnvWithoutDefaults("DB")
	brokerstring := getEnvWithoutDefaults("BROKERS")
	topic := getEnvWithoutDefaults("TOPIC")
	groupId := getEnvWithoutDefaults("GROUP")

	port, err := strconv.Atoi(portStr)
	if err != nil {
		panic(err)
	}

	c, err := kafka.NewConsumer(&kafka.ConfigMap{
		"bootstrap.servers": brokerstring,
		"group.id":          groupId,
		"auto.offset.reset": "earliest",
	})
	if err != nil {
		log.Fatalf("Failed to create consumer: %s", err)
	}
	defer c.Close()

	url := fmt.Sprintf("postgres://%s:%s@%s:%d/%s", strings.TrimSpace(user), strings.TrimSpace(password), strings.TrimSpace(host), port, strings.TrimSpace(dbname))

	fmt.Println(url)
	dbconfig, err := pgxpool.ParseConfig(url)
	if err != nil {
		panic(err)
	}
	// dbconfig.AfterConnect = func(ctx context.Context, conn *pgx.Conn) error {
	// 	pgxuuid.Register(conn.TypeMap())
	// 	return nil
	// }
	dbpool, err := pgxpool.NewWithConfig(context.TODO(), dbconfig)
	if err != nil {
		panic(err)
	}
	defer dbpool.Close()

	println("Querying for all existing ids in the database")
	id_map := getExistingIds(dbpool)
	println("Number of entries in the database:", len(id_map))

	readFromTopic(c, topic, dbpool, id_map)
	// readFromTopic("output", dbpool, id_map)
	println("Database insertion completed")

	// // Infinite loop
	// println("Beginning indefinite wait")
	// for true {

	// }
}

// func getEnv(key, defaultValue string) string {
// 	if value := os.Getenv(key); value != "" {
// 		return value
// 	}
// 	return defaultValue
// }

func getEnvWithoutDefaults(key string) string {
	return os.Getenv(key)
}

func insertRecord(byteValue []byte, dbpool *pgxpool.Pool, id_map map[string]bool) {

	var result map[string]interface{}
	json.Unmarshal([]byte(byteValue), &result)

	mdInterface := result["cveMetadata"]
	metadata, _ := mdInterface.(map[string]interface{})
	cve_id := metadata["cveId"]
	// date_reserved := metadata["dateReserved"]
	date_published := metadata["datePublished"]
	date_updated := metadata["dateUpdated"]

	// Insert record if it doesn't already exist in database
	if !id_map[cve_id.(string)] {
		insert_query := `INSERT INTO cve.cve_records ( cve_id, record, vrsn, created_at, updated_at) VALUES (@cve_id, @record, @vrsn, @created_at, @updated_at)`
		args := pgx.NamedArgs{
			"cve_id":     cve_id,
			"record":     string(byteValue),
			"vrsn":       "1",
			"created_at": date_published,
			"updated_at": date_updated,
		}
		_, err := dbpool.Exec(context.Background(), insert_query, args)
		if err != nil {
			fmt.Println("unable to insert row: %w", err)
		}
	}

}

func getExistingIds(dbpool *pgxpool.Pool) map[string]bool {
	select_query := `SELECT cve_id FROM cve.cve_records`

	rows, err := dbpool.Query(context.Background(), select_query)
	if err != nil {
		fmt.Println("unable to query cve.cve_records: %w", err)
	}
	defer rows.Close()

	id_map := make(map[string]bool)
	for rows.Next() {
		var id = ""
		err := rows.Scan(&id)
		if err != nil {
			fmt.Println("unable to scan row: %w", err)
		}
		id_map[id] = true
	}

	return id_map

}

func readFromTopic(c *kafka.Consumer, topic string, dbpool *pgxpool.Pool, id_map map[string]bool) {

	// Subscribe to the topic
	err := c.SubscribeTopics([]string{topic}, nil)
	if err != nil {
		log.Fatalf("Failed to subscribe to topics: %s", err)
	}

	// Set up signal handling to gracefully shut down
	sigchan := make(chan os.Signal, 1)
	signal.Notify(sigchan, syscall.SIGINT, syscall.SIGTERM)

	run := true

	for run {
		select {
		case sig := <-sigchan:
			log.Printf("Caught signal %v: terminating\n", sig)
			run = false
		default:
			ev := c.Poll(100)
			switch e := ev.(type) {
			case *kafka.Message:
				// str := e.Value
				insertRecord(e.Value, dbpool, id_map)
			case kafka.Error:
				// Log the error but continue consuming
				log.Printf("Error: %v\n", e)
			default:
				// No new message, continue
			}
		}
	}

	log.Println("Closing consumer")
}
