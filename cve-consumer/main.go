package main

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"os/signal"
	"strconv"
	"strings"

	// pgxuuid "github.com/jackc/pgx-gofrs-uuid"
	"github.com/IBM/sarama"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

func main() {

	host := getEnv("HOST", "localhost")
	portStr := getEnv("PORT", "5432")
	// user := getEnv("USER", "anuraag")
	user := "anuraag"
	// password := getEnv("PWD", "anuraag")
	password := "anuraag"
	dbname := getEnv("DB", "postgres")
	brokerstring := getEnv("BROKERS", "localhost:9092")
	topic := getEnv("TOPIC", "testtopic")
	partitionStr := getEnv("PARTITION", "0")
	port, err := strconv.Atoi(portStr)
	if err != nil {
		panic(err)
	}
	partitionIndex, err := strconv.Atoi(partitionStr)
	if err != nil {
		panic(err)
	}

	config := sarama.NewConfig()
	config.Consumer.Return.Errors = true

	brokers := strings.Split(brokerstring, ",")

	master, err := sarama.NewConsumer(brokers, config)
	if err != nil {
		panic(err)
	}

	defer func() {
		if err := master.Close(); err != nil {
			panic(err)
		}
	}()

	consumer, err := master.ConsumePartition(topic, int32(partitionIndex), sarama.OffsetOldest)
	if err != nil {
		panic(err)
	}

	url := fmt.Sprintf("postgres://%s:%s@%s:%d/%s", strings.TrimSpace(user), strings.TrimSpace(password), strings.TrimSpace(host), port, strings.TrimSpace(dbname))

	fmt.Println(url)
	dbconfig, err := pgxpool.ParseConfig(url)
	if err != nil {
		panic(err)
	}
	// dbconfig.AfterConnect = func(ctx context.Context, conn *pgx.Conn) error {
	// 	pgxuuid.Register(conn.TypeMap())
	// 	return nil
	// }
	dbpool, err := pgxpool.NewWithConfig(context.TODO(), dbconfig)
	if err != nil {
		panic(err)
	}
	defer dbpool.Close()

	println("Querying for all existing ids in the database")
	id_map := getExistingIds(dbpool)
	println("Number of entries in the database:", len(id_map))

	readFromTopic(consumer, dbpool, id_map)
	// readFromTopic("output", dbpool, id_map)
	println("Database insertion completed")

	// Infinite loop
	println("Beginning indefinite wait")
	for true {

	}
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

func insertRecord(byteValue []byte, dbpool *pgxpool.Pool, id_map map[string]bool) {

	var result map[string]interface{}
	json.Unmarshal([]byte(byteValue), &result)

	mdInterface := result["cveMetadata"]
	metadata, _ := mdInterface.(map[string]interface{})
	cve_id := metadata["cveId"]
	// date_reserved := metadata["dateReserved"]
	date_published := metadata["datePublished"]
	date_updated := metadata["dateUpdated"]

	// Insert record if it doesn't already exist in database
	if !id_map[cve_id.(string)] {
		insert_query := `INSERT INTO cve.cve_records ( cve_id, record, vrsn, created_at, updated_at) VALUES (@cve_id, @record, @vrsn, @created_at, @updated_at)`
		args := pgx.NamedArgs{
			"cve_id":     cve_id,
			"record":     string(byteValue),
			"vrsn":       "1",
			"created_at": date_published,
			"updated_at": date_updated,
		}
		_, err := dbpool.Exec(context.Background(), insert_query, args)
		if err != nil {
			fmt.Println("unable to insert row: %w", err)
		}
	}

}

func getExistingIds(dbpool *pgxpool.Pool) map[string]bool {
	select_query := `SELECT cve_id FROM cve.cve_records`

	rows, err := dbpool.Query(context.Background(), select_query)
	if err != nil {
		fmt.Println("unable to query cve.cve_records: %w", err)
	}
	defer rows.Close()

	id_map := make(map[string]bool)
	for rows.Next() {
		var id = ""
		err := rows.Scan(&id)
		if err != nil {
			fmt.Println("unable to scan row: %w", err)
		}
		id_map[id] = true
	}

	return id_map

}

func readFromTopic(consumer sarama.PartitionConsumer, dbpool *pgxpool.Pool, id_map map[string]bool) {

	signals := make(chan os.Signal, 1)
	signal.Notify(signals, os.Interrupt)
	msgCount := 0
	doneCh := make(chan struct{})
	go func() {
		for {
			select {
			case err := <-consumer.Errors():
				fmt.Println(err)
			case msg := <-consumer.Messages():
				msgCount++
				// fmt.Println("Received messages", string(msg.Key), string(msg.Value))
				insertRecord(msg.Value, dbpool, id_map)
			case <-signals:
				fmt.Println("Interrupt is detected")
				doneCh <- struct{}{}
			}
		}
	}()

	<-doneCh
	fmt.Println("Processed", msgCount, "messages")
}
