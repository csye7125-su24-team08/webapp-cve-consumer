package main

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strconv"
	"strings"
	"sync"
	"syscall"

	"github.com/IBM/sarama"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

var dbpool *pgxpool.Pool
var id_map map[string]bool
var brokers string
var keepRunning bool

func main() {

	keepRunning = true
	// // default values for local testing
	// host := getEnv("HOST", "localhost")
	// portStr := getEnv("PORT", "5432")
	// // user := getEnv("USER", "anuraag")
	// user := "anuraag"
	// // password := getEnv("PWD", "anuraag")
	// password := "anuraag"
	// dbname := getEnv("DB", "postgres")
	// brokers = getEnv("BROKERS", "localhost:9092")
	// topic := getEnv("TOPIC", "cve2")
	// groupId := getEnv("GROUP", "group2")

	host := getEnvWithoutDefaults("HOST")
	portStr := getEnvWithoutDefaults("PORT")
	user := getEnvWithoutDefaults("USER")
	password := getEnvWithoutDefaults("PWD")
	dbname := getEnvWithoutDefaults("DB")
	brokers := getEnvWithoutDefaults("BROKERS")
	topic := getEnvWithoutDefaults("TOPIC")
	groupId := getEnvWithoutDefaults("GROUP")

	// Starting HTTP server for probes
	go handleRequests()

	port, err := strconv.Atoi(portStr)
	if err != nil {
		panic(err)
	}

	url := fmt.Sprintf("postgres://%s:%s@%s:%d/%s", strings.TrimSpace(user), strings.TrimSpace(password), strings.TrimSpace(host), port, strings.TrimSpace(dbname))
	fmt.Println(url)

	dbconfig, err := pgxpool.ParseConfig(url)
	if err != nil {
		panic(err)
	}
	dbpool, err = pgxpool.NewWithConfig(context.TODO(), dbconfig)
	if err != nil {
		println(err)
		panic(err)
	}
	defer dbpool.Close()

	for {
		println("Querying for all existing ids in the database")
		id_map, err = getExistingIds(dbpool)
		if err != nil {
			log.Println("Error getting existing ids, retrying", err)
			continue
		}
		println("Number of entries in the database:", len(id_map))

		e := readFromTopic(brokers, groupId, topic)
		if e != nil {
			log.Println("Error connecting to kafka or inserting to db, retrying", e)
			continue
		} else {
			log.Println("Exiting")
			break
		}
	}
	println("Database insertion completed")

}

// func getEnv(key, defaultValue string) string {
// 	if value := os.Getenv(key); value != "" {
// 		return value
// 	}
// 	return defaultValue
// }

func getEnvWithoutDefaults(key string) string {
	return os.Getenv(key)
}

func insertRecord(byteValue []byte, dbpool *pgxpool.Pool, id_map map[string]bool) error {

	var result map[string]interface{}
	json.Unmarshal([]byte(byteValue), &result)

	mdInterface := result["cveMetadata"]
	metadata, _ := mdInterface.(map[string]interface{})
	cve_id := metadata["cveId"]
	// date_reserved := metadata["dateReserved"]
	date_published := metadata["datePublished"]
	date_updated := metadata["dateUpdated"]

	// Insert record if it doesn't already exist in database
	if !id_map[cve_id.(string)] {
		insert_query := `INSERT INTO cve.cve_records ( cve_id, record, vrsn, created_at, updated_at) VALUES (@cve_id, @record, @vrsn, @created_at, @updated_at)`
		args := pgx.NamedArgs{
			"cve_id":     cve_id,
			"record":     string(byteValue),
			"vrsn":       "1",
			"created_at": date_published,
			"updated_at": date_updated,
		}
		_, err := dbpool.Exec(context.Background(), insert_query, args)
		if err != nil {
			fmt.Println("unable to insert row: %w", err)
			return err
		}
	}
	return nil
}

func getExistingIds(dbpool *pgxpool.Pool) (map[string]bool, error) {
	select_query := `SELECT cve_id FROM cve.cve_records`

	rows, err := dbpool.Query(context.Background(), select_query)
	if err != nil {
		fmt.Println("unable to query cve.cve_records: %w", err)
		return nil, err
	}
	defer rows.Close()

	id_map := make(map[string]bool)
	for rows.Next() {
		var id = ""
		err := rows.Scan(&id)
		if err != nil {
			fmt.Println("unable to scan row: %w", err)
			return nil, err
		}
		id_map[id] = true
	}

	return id_map, nil

}

func readFromTopic(brokers string, groupId string, topic string) error {
	oldest := true
	verbose := false

	keepRunning := true
	log.Println("Starting a new Sarama consumer")

	if verbose {
		sarama.Logger = log.New(os.Stdout, "[sarama] ", log.LstdFlags)
	}
	config := sarama.NewConfig()
	// config.Version = version
	config.Consumer.Group.Rebalance.GroupStrategies = []sarama.BalanceStrategy{sarama.NewBalanceStrategyRoundRobin()}

	if oldest {
		config.Consumer.Offsets.Initial = sarama.OffsetOldest
	}

	consumer := Consumer{
		ready: make(chan bool),
	}

	ctx, cancel := context.WithCancel(context.Background())
	client, err := sarama.NewConsumerGroup(strings.Split(brokers, ","), groupId, config)
	if err != nil {
		log.Printf("Error creating consumer group client: %v", err)
		cancel()
		return err
	}

	consumptionIsPaused := false
	wg := &sync.WaitGroup{}
	wg.Add(1)
	errchan := make(chan error)
	go func() {
		defer wg.Done()
		for {
			// `Consume` should be called inside an infinite loop, when a
			// server-side rebalance happens, the consumer session will need to be
			// recreated to get the new claims
			if err := client.Consume(ctx, strings.Split(topic, ","), &consumer); err != nil {
				if errors.Is(err, sarama.ErrClosedConsumerGroup) {
					errchan <- err
					return
				}
				log.Printf("Error from consumer: %v\n", err)
				errchan <- err
				return
			}
			// check if context was cancelled, signaling that the consumer should stop
			if ctx.Err() != nil {
				errchan <- err
				return
			}
			consumer.ready = make(chan bool)
		}
	}()

	log.Println("Waiting for consumer to be ready")
	<-consumer.ready // Await till the consumer has been set up
	log.Println("Sarama consumer ready")

	sigusr1 := make(chan os.Signal, 1)
	signal.Notify(sigusr1, syscall.SIGUSR1)

	sigterm := make(chan os.Signal, 1)
	signal.Notify(sigterm, syscall.SIGINT, syscall.SIGTERM)

	for keepRunning {
		select {
		case <-ctx.Done():
			log.Println("terminating: context cancelled")
			keepRunning = false
		case <-sigterm:
			log.Println("terminating: via signal")
			keepRunning = false
		case <-sigusr1:
			toggleConsumptionFlow(client, &consumptionIsPaused)
		case e := <-errchan:
			cancel()
			wg.Wait()
			// if err = client.Close(); err != nil {
			// 	log.Printf("Error closing client: %v", err)
			// }
			log.Printf("Error found in channel errchan: %v", e)
			log.Printf("Value of client: %v", client)
			return e
		}
	}
	cancel()
	log.Println("Waiting to exit")
	wg.Wait()
	if err = client.Close(); err != nil {
		log.Printf("Error closing client: %v", err)
	}
	return nil
}

func toggleConsumptionFlow(client sarama.ConsumerGroup, isPaused *bool) {
	if *isPaused {
		client.ResumeAll()
		log.Println("Resuming consumption")
	} else {
		client.PauseAll()
		log.Println("Pausing consumption")
	}

	*isPaused = !*isPaused
}

type Consumer struct {
	ready chan bool
}

func (consumer *Consumer) Setup(sarama.ConsumerGroupSession) error {
	// Mark the consumer as ready
	close(consumer.ready)
	return nil
}

// Cleanup is run at the end of a session, once all ConsumeClaim goroutines have exited
func (consumer *Consumer) Cleanup(sarama.ConsumerGroupSession) error {
	return nil
}

// ConsumeClaim must start a consumer loop of ConsumerGroupClaim's Messages().
// Once the Messages() channel is closed, the Handler must finish its processing
// loop and exit.
func (consumer *Consumer) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error {
	// NOTE:
	// Do not move the code below to a goroutine.
	// The `ConsumeClaim` itself is called within a goroutine, see:
	// https://github.com/IBM/sarama/blob/main/consumer_group.go#L27-L29
	for {
		select {
		case message, ok := <-claim.Messages():
			if !ok {
				log.Printf("message channel was closed")
				return nil
			}
			// log.Printf("Message claimed: value = %s, timestamp = %v, topic = %s", string(message.Value), message.Timestamp, message.Topic)
			err := insertRecord(message.Value, dbpool, id_map)
			if err != nil {
				log.Println("Message not marked in ConsumeClaim due to error")
				return err
			}
			session.MarkMessage(message, "")
			return nil
		// Should return when `session.Context()` is done.
		// If not, will raise `ErrRebalanceInProgress` or `read tcp <ip>:<port>: i/o timeout` when kafka rebalance. see:
		// https://github.com/IBM/sarama/issues/1192
		case <-session.Context().Done():
			return nil
		}
	}
}

func handleRequests() {
	if !keepRunning {
		return
	}
	http.HandleFunc("/healthz", livenessCheck)
	http.HandleFunc("/ready", readinessCheck)
	log.Println("Starting liveness probe on :8080/healthz")
	log.Println("Starting readiness probe on :8080/ready")
	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatalf("Probe failed: %s", err)
	}
}

func livenessCheck(w http.ResponseWriter, r *http.Request) {

	log.Println("Liveness probe hit")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("OK"))
}

func readinessCheck(w http.ResponseWriter, r *http.Request) {
	log.Println("Readiness probe hit")
	if checkDBConn() && checkKafkaConn() {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("Ready"))
	} else {
		w.WriteHeader(http.StatusServiceUnavailable)
		w.Write([]byte("Service Unavailable"))
	}
}

func checkDBConn() bool {
	if dbpool == nil {
		return false
	}
	err := dbpool.Ping(context.TODO())
	return err == nil
}

func checkKafkaConn() bool {
	config := sarama.NewConfig()
	client, err := sarama.NewClient(strings.Split(brokers, ","), config)
	if err != nil {
		log.Printf("Error connecting to Kafka brokers: %v", err)
		return false
	}
	defer func() {
		if err := client.Close(); err != nil {
			log.Printf("Error closing Kafka client: %v", err)
		}
	}()
	// Check if client is connected to brokers
	if connected := client.Closed(); connected {
		log.Println("Kafka client is not connected")
		return false
	}
	log.Println("Kafka client is connected")
	return true
}
