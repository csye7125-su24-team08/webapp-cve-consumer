package main

import (
	"context"
	"errors"
	"fmt"
	l "log"
	"os"
	"os/signal"
	"strconv"
	"strings"
	"sync"
	"syscall"
	"time"

	"github.com/IBM/sarama"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
)

var dbpool *pgxpool.Pool
var mapchan chan string
var askchan chan string
var givechan chan bool
var exitchan chan bool
var brokers string
var keepRunning bool

func main() {

	zerolog.TimeFieldFormat = zerolog.TimeFormatUnix

	host := getEnvWithoutDefaults("HOST")
	portStr := getEnvWithoutDefaults("PORT")
	user := getEnvWithoutDefaults("USER")
	password := getEnvWithoutDefaults("PWD")
	dbname := getEnvWithoutDefaults("DB")
	brokers = getEnvWithoutDefaults("BROKERS")
	topic := getEnvWithoutDefaults("TOPIC")
	groupId := getEnvWithoutDefaults("GROUP")

	// Bool to shut down http server when program wants to exit
	keepRunning = true

	// Starting HTTP server for probes
	go handleRequests()

	// Starting routine to handle id_map updates
	mapchan = make(chan string)
	askchan = make(chan string)
	givechan = make(chan bool)
	exitchan = make(chan bool)
	go handleMapUpdates()

	port, err := strconv.Atoi(portStr)
	if err != nil {
		panic(err)
	}

	url := fmt.Sprintf("postgres://%s:%s@%s:%d/%s", strings.TrimSpace(user), strings.TrimSpace(password), strings.TrimSpace(host), port, strings.TrimSpace(dbname))

	dbconfig, err := pgxpool.ParseConfig(url)
	if err != nil {
		log.Error().Err(err).Msg("Error parsing db url")
		panic(err)
	}
	dbpool, err = pgxpool.NewWithConfig(context.TODO(), dbconfig)
	if err != nil {
		log.Error().Err(err).Msg("Error connecting to db")
		panic(err)
	}
	defer dbpool.Close()

	count := 0
	for {
		log.Info().Str("brokers", brokers).Str("topic", topic).Str("groupId", groupId).Int("Counter", int(count)).Msg("Starting cve consumer")
		count = count + 1
		println("Querying for all existing ids in the database")
		err = getExistingIds(dbpool, mapchan)
		if err != nil {
			log.Error().Err(err).Msg("Error querying for existing ids")
			time.Sleep(5 * time.Second)
			continue
		}

		e := readFromTopic(brokers, groupId, topic)
		if e != nil {
			log.Error().Err(e).Msg("Error reading from topic")
			continue
		} else {
			log.Info().Msg("Successfully read from topic")
			break
		}
	}
	println("Stopping all listeners and exiting cve consumer program")
	exitchan <- true

}

func readFromTopic(brokers string, groupId string, topic string) error {
	oldest := true
	verbose := false

	keepRunning := true
	log.Info().Str("brokers", brokers).Str("topic", topic).Str("groupId", groupId).Msg("Starting consumer group")

	if verbose {
		sarama.Logger = l.New(os.Stdout, "[sarama] ", l.LstdFlags)
	}
	config := sarama.NewConfig()
	// config.Version = version
	config.Consumer.Group.Rebalance.GroupStrategies = []sarama.BalanceStrategy{sarama.NewBalanceStrategyRoundRobin()}

	if oldest {
		config.Consumer.Offsets.Initial = sarama.OffsetOldest
	}

	consumer := Consumer{
		ready: make(chan bool),
	}

	ctx, cancel := context.WithCancel(context.Background())
	client, err := sarama.NewConsumerGroup(strings.Split(brokers, ","), groupId, config)
	if err != nil {
		log.Printf("Error creating consumer group client: %v", err)
		cancel()
		return err
	}

	consumptionIsPaused := false
	wg := &sync.WaitGroup{}
	wg.Add(1)
	errchan := make(chan error)
	go func() {
		defer wg.Done()
		for {
			// `Consume` should be called inside an infinite loop, when a
			// server-side rebalance happens, the consumer session will need to be
			// recreated to get the new claims
			if err := client.Consume(ctx, strings.Split(topic, ","), &consumer); err != nil {
				if errors.Is(err, sarama.ErrClosedConsumerGroup) {
					errchan <- err
					return
				}
				log.Printf("Error from consumer: %v\n", err)
				errchan <- err
				return
			}
			// check if context was cancelled, signaling that the consumer should stop
			if ctx.Err() != nil {
				return
			}
			consumer.ready = make(chan bool)
		}
	}()

	log.Info().Msg("Waiting for consumer to be set up")
	<-consumer.ready // Await till the consumer has been set up
	log.Info().Msg("Consumer set up")

	sigusr1 := make(chan os.Signal, 1)
	signal.Notify(sigusr1, syscall.SIGUSR1)

	sigterm := make(chan os.Signal, 1)
	signal.Notify(sigterm, syscall.SIGINT, syscall.SIGTERM)

	for keepRunning {
		select {
		case <-ctx.Done():
			log.Debug().Msg("Context done")
			keepRunning = false
		case <-sigterm:
			log.Debug().Msg("Received SIGTERM")
			keepRunning = false
		case <-sigusr1:
			toggleConsumptionFlow(client, &consumptionIsPaused)
		case e := <-errchan:
			cancel()
			wg.Wait()
			log.Printf("Error found in channel errchan: %v", e)
			log.Printf("Value of client: %v", client)
			keepRunning = false
			if err = client.Close(); err != nil {
				log.Printf("Error closing client: %v", err)
			}
			return e
		}
	}
	cancel()
	log.Info().Msg("Waiting for consumer to finish")
	wg.Wait()
	if err = client.Close(); err != nil {
		log.Printf("Error closing client: %v", err)
	}
	return nil
}

func toggleConsumptionFlow(client sarama.ConsumerGroup, isPaused *bool) {
	if *isPaused {
		client.ResumeAll()
		log.Debug().Msg("Resuming consumption")
	} else {
		client.PauseAll()
		log.Debug().Msg("Pausing consumption")
	}

	*isPaused = !*isPaused
}

type Consumer struct {
	ready chan bool
}

func (consumer *Consumer) Setup(sarama.ConsumerGroupSession) error {
	// Mark the consumer as ready
	close(consumer.ready)
	return nil
}

// Cleanup is run at the end of a session, once all ConsumeClaim goroutines have exited
func (consumer *Consumer) Cleanup(sarama.ConsumerGroupSession) error {
	return nil
}

// ConsumeClaim must start a consumer loop of ConsumerGroupClaim's Messages().
// Once the Messages() channel is closed, the Handler must finish its processing
// loop and exit.
func (consumer *Consumer) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error {
	// NOTE:
	// Do not move the code below to a goroutine.
	// The `ConsumeClaim` itself is called within a goroutine, see:
	// https://github.com/IBM/sarama/blob/main/consumer_group.go#L27-L29
	for {
		select {
		case message, ok := <-claim.Messages():
			if !ok {
				log.Printf("message channel was closed")
				return nil
			}
			// log.Printf("Message claimed: value = %s, timestamp = %v, topic = %s", string(message.Value), message.Timestamp, message.Topic)
			err := insertRecord(message.Value, dbpool)
			if err != nil {
				log.Error().Err(err).Msg("Error inserting record")
				return err
			}
			session.MarkMessage(message, "")
		// Should return when `session.Context()` is done.
		// If not, will raise `ErrRebalanceInProgress` or `read tcp <ip>:<port>: i/o timeout` when kafka rebalance. see:
		// https://github.com/IBM/sarama/issues/1192
		case <-session.Context().Done():
			return nil
		}
	}
}

func handleMapUpdates() {
	id_map := make(map[string]bool)
	for {
		select {
		case query := <-askchan:
			givechan <- id_map[query]
		case id := <-mapchan:
			id_map[id] = true
		case exit := <-exitchan:
			log.Debug().Bool("exit", exit).Msg("Exiting handleMapUpdates")
			return
		}
	}
}
