package main

import (
	"context"
	"log"
	"net/http"
	"strings"

	"github.com/IBM/sarama"
)

func handleRequests() {
	if !keepRunning {
		return
	}
	http.HandleFunc("/healthz", livenessCheck)
	http.HandleFunc("/ready", readinessCheck)
	log.Println("Starting liveness probe on :8080/healthz")
	log.Println("Starting readiness probe on :8080/ready")
	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatalf("Probe failed: %s", err)
	}
}

func livenessCheck(w http.ResponseWriter, r *http.Request) {

	log.Println("Liveness probe hit")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("OK"))
}

func readinessCheck(w http.ResponseWriter, r *http.Request) {
	log.Println("Readiness probe hit")
	if checkDBConn() && checkKafkaConn() {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("Ready"))
	} else {
		w.WriteHeader(http.StatusServiceUnavailable)
		w.Write([]byte("Service Unavailable"))
	}
}

func checkDBConn() bool {
	if dbpool == nil {
		return false
	}
	err := dbpool.Ping(context.TODO())
	return err == nil
}

func checkKafkaConn() bool {
	config := sarama.NewConfig()
	client, err := sarama.NewClient(strings.Split(brokers, ","), config)
	if err != nil {
		log.Printf("Error connecting to Kafka brokers: %v", err)
		return false
	}
	defer func() {
		if err := client.Close(); err != nil {
			log.Printf("Error closing Kafka client: %v", err)
		}
	}()
	// Check if client is connected to brokers
	if connected := client.Closed(); connected {
		log.Println("Kafka client is not connected!")
		return false
	}
	log.Println("Kafka client is connected!")
	return true
}
